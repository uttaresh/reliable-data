#!/usr/bin/python

import socket
from collections import namedtuple



###TCP Segment Stuct###
''' TCP Segment will be a list(C++ array) of length 6 where
    indices represent:
        0   Source Port
        1   Destination Port
        2   Segment Type
        3   Ack number
        4   Window Size
        5   Data
'''

## Function that takes the raw bytes received and converts it into a TCP segment
def strToSeg(split_data):
    #Define empty packet
    packet = [0,0,'',0,0,'']
    temp = ''
    #Parse src port
    for c in split_data[0]:
        if ( (c!='[') & (c!="'") ):
            temp+=c
    packet[0] = int(temp)

    temp = ''
    #Parse dest port
    for c in split_data[1]:
        if (c!="'"):
            temp+=c
    packet[1] = int(temp)

    #Parse seg type 
    for c in split_data[2]:
        if ( (c!='"') & (c!="'") ):
            packet[2]+=c 

    temp = ''
    #Parse ack no
    for c in split_data[3]:
        if (c!="'"):
            temp+=c
    packet[3] = int(temp)
    
    temp = ''
    #Parse window size
    for c in split_data[4]:
        if (c!="'"):
            temp+=c
    packet[4] = int(temp)
    
    temp = ''
    if (len(split_data)>5):
        for s in split_data[6:]:
            split_data[5]+=', '
            split_data[5]+=s
    
    if split_data[5]=='0]':
        packet[5] = ''
    else:
        temp = ''
        for c in split_data[5]:
            if ( (c!=']') & (c!="'") ):
                temp+=c
            packet[5] = temp

    return packet
        


#Main function
HOST = ''                 # Symbolic name meaning the local host
PORT = 50007              # Arbitrary non-privileged port
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((HOST, PORT))
s.listen(1)
conn, addr = s.accept()
print 'Connected by', addr
while 1:
    data = conn.recv(1024)
    if not data: break
    splitData = data.split(", ")
    packet = strToSeg(splitData)
    if packet[2]=='SYN':
       print "SYN received from IP address " + str(addr[0]) + ' on port '+ str(packet[0]) + '.'
conn.close()
